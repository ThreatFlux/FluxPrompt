name: Auto Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'Cargo.toml'

permissions:
  contents: write
  pull-requests: write

jobs:
  check-version:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_check.outputs.changed }}
      new_version: ${{ steps.version_check.outputs.version }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if version changed
        id: version_check
        run: |
          NEW_VERSION=$(grep "^version" Cargo.toml | head -1 | cut -d'"' -f2)
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Check if tag exists
          if git rev-parse "v$NEW_VERSION" >/dev/null 2>&1; then
            echo "Version v$NEW_VERSION already exists"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "New version detected: v$NEW_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

  create-release:
    name: Create Release
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a "v${{ needs.check-version.outputs.new_version }}" -m "Release v${{ needs.check-version.outputs.new_version }}"
          git push origin "v${{ needs.check-version.outputs.new_version }}"

      - name: Generate release notes
        id: release_notes
        run: |
          echo "# Release v${{ needs.check-version.outputs.new_version }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "## Initial Release" >> RELEASE_NOTES.md
            git log --pretty=format:"- %s" >> RELEASE_NOTES.md
          else
            echo "## What's Changed" >> RELEASE_NOTES.md
            git log --pretty=format:"- %s" "$LAST_TAG"..HEAD >> RELEASE_NOTES.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.check-version.outputs.new_version }}
          name: v${{ needs.check-version.outputs.new_version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}